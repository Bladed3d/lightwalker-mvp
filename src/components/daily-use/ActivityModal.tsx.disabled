'use client'

import { useState, useEffect } from 'react';
import { 
  X, 
  Clock, 
  User, 
  Target, 
  Zap, 
  Star,
  Check,
  Calendar,
  MapPin,
  Package,
  Heart,
  Brain,
  Award,
  ChevronRight,
  Play,
  Pause,
  RefreshCw
} from 'lucide-react';
import { Activity } from '@/types/daily-use';

interface ActivityModalProps {
  activity: Activity;
  isOpen: boolean;
  onClose: () => void;
  onComplete: (activityId: string, rating?: number, notes?: string) => Promise<void>;
  onReschedule: (activityId: string, newTime: string) => Promise<void>;
}

export default function ActivityModal({
  activity,
  isOpen,
  onClose,
  onComplete,
  onReschedule
}: ActivityModalProps) {
  const [activeTab, setActiveTab] = useState<'overview' | 'method' | 'complete'>('overview');
  const [userRating, setUserRating] = useState<number>(0);
  const [reflectionNotes, setReflectionNotes] = useState('');
  const [newScheduledTime, setNewScheduledTime] = useState(activity.scheduledTime || '');
  const [isCompleting, setIsCompleting] = useState(false);
  const [isRescheduling, setIsRescheduling] = useState(false);
  const [sessionTimer, setSessionTimer] = useState(0);
  const [isTimerActive, setIsTimerActive] = useState(false);

  // Timer effect
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isTimerActive) {
      interval = setInterval(() => {
        setSessionTimer(prev => prev + 1);
      }, 1000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isTimerActive]);

  // Reset state when modal opens/closes
  useEffect(() => {
    if (isOpen) {
      setActiveTab('overview');
      setUserRating(0);
      setReflectionNotes('');
      setNewScheduledTime(activity.scheduledTime || '');
      setSessionTimer(0);
      setIsTimerActive(false);
    }
  }, [isOpen, activity.scheduledTime]);

  const handleComplete = async () => {
    setIsCompleting(true);
    try {
      await onComplete(activity.id, userRating > 0 ? userRating : undefined, reflectionNotes || undefined);
      onClose();
    } catch (error) {
      console.error('Failed to complete activity:', error);
    } finally {
      setIsCompleting(false);
    }
  };

  const handleReschedule = async () => {
    if (newScheduledTime === activity.scheduledTime) {
      return;
    }
    
    setIsRescheduling(true);
    try {
      await onReschedule(activity.id, newScheduledTime);
      onClose();
    } catch (error) {
      console.error('Failed to reschedule activity:', error);
    } finally {
      setIsRescheduling(false);
    }
  };

  const formatTimer = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const getDifficultyLabel = (difficulty: number) => {
    if (difficulty <= 3) return 'Easy';
    if (difficulty <= 6) return 'Moderate';
    return 'Challenging';
  };

  const getDifficultyColor = (difficulty: number) => {
    if (difficulty <= 3) return 'text-green-600 bg-green-100';
    if (difficulty <= 6) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'mindfulness': return 'üßò';
      case 'decision-making': return 'üéØ';
      case 'communication': return 'üí¨';
      case 'reflection': return 'ü§î';
      case 'physical': return 'üí™';
      case 'creative': return 'üé®';
      default: return '‚≠ê';
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div 
              className="w-12 h-12 rounded-lg flex items-center justify-center text-xl"
              style={{ backgroundColor: activity.roleModelColor + '20' }}
            >
              {getCategoryIcon(activity.category)}
            </div>
            <div>
              <h2 className="text-xl font-bold text-gray-900">{activity.title}</h2>
              <p className="text-sm text-gray-600">{activity.roleModel} ‚Ä¢ {activity.attribute}</p>
            </div>
          </div>
          
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="w-6 h-6 text-gray-500" />
          </button>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-gray-200">
          {[
            { id: 'overview', label: 'Overview' },
            { id: 'method', label: 'Method' },
            { id: 'complete', label: 'Complete' }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id as any)}
              className={`flex-1 px-6 py-3 text-sm font-medium border-b-2 transition-colors ${
                activeTab === tab.id
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              {tab.label}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="max-h-[60vh] overflow-y-auto">
          {activeTab === 'overview' && (
            <div className="p-6 space-y-6">
              {/* Description */}
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3">Activity Description</h3>
                <p className="text-gray-700 leading-relaxed">{activity.description}</p>
              </div>

              {/* Details Grid */}
              <div className="grid grid-cols-2 gap-4">
                <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                  <Clock className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="text-sm text-gray-600">Duration</div>
                    <div className="font-semibold text-gray-900">{activity.duration}</div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                  <Target className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="text-sm text-gray-600">Difficulty</div>
                    <div className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${getDifficultyColor(activity.difficulty)}`}>
                      {getDifficultyLabel(activity.difficulty)} ({activity.difficulty}/9)
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                  <Zap className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="text-sm text-gray-600">Points</div>
                    <div className="font-semibold text-gray-900">{activity.points} points</div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3 p-4 bg-gray-50 rounded-lg">
                  <Calendar className="w-5 h-5 text-gray-500" />
                  <div>
                    <div className="text-sm text-gray-600">Scheduled</div>
                    <div className="font-semibold text-gray-900">{activity.scheduledTime || 'Anytime'}</div>
                  </div>
                </div>
              </div>

              {/* Benefits */}
              <div className="p-4 bg-green-50 rounded-lg">
                <div className="flex items-start space-x-3">
                  <Heart className="w-5 h-5 text-green-500 mt-0.5" />
                  <div>
                    <div className="text-sm text-green-600 font-medium">Why This Matters</div>
                    <div className="text-green-800">{activity.benefit}</div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'method' && (
            <div className="p-6 space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                  <Brain className="w-5 h-5 mr-2 text-indigo-500" />
                  How {activity.roleModel} Does This
                </h3>
                <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-4">
                  <p className="text-indigo-900 leading-relaxed">{activity.method}</p>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                  <Award className="w-5 h-5 mr-2 text-green-500" />
                  Success Criteria
                </h3>
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <p className="text-green-900 leading-relaxed">{activity.successCriteria}</p>
                </div>
              </div>

              {/* Timer Section */}
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-semibold text-gray-900 mb-3">Activity Timer</h4>
                <div className="flex items-center justify-between">
                  <div className="text-2xl font-mono font-bold text-gray-900">
                    {formatTimer(sessionTimer)}
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => setIsTimerActive(!isTimerActive)}
                      className={`p-2 rounded-lg transition-colors ${
                        isTimerActive
                          ? 'bg-red-100 text-red-600 hover:bg-red-200'
                          : 'bg-green-100 text-green-600 hover:bg-green-200'
                      }`}
                    >
                      {isTimerActive ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
                    </button>
                    <button
                      onClick={() => {
                        setSessionTimer(0);
                        setIsTimerActive(false);
                      }}
                      className="p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors"
                    >
                      <RefreshCw className="w-5 h-5" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'complete' && (
            <div className="p-6 space-y-6">
              {!activity.isCompleted ? (
                <>
                  {/* Completion Form */}
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">Complete This Activity</h3>
                    
                    {/* Rating */}
                    <div className="mb-6">
                      <label className="block text-sm font-medium text-gray-700 mb-3">
                        How challenging was this activity for you?
                      </label>
                      <div className="flex space-x-2">
                        {[1, 2, 3, 4, 5].map((rating) => (
                          <button
                            key={rating}
                            onClick={() => setUserRating(rating)}
                            className={`p-2 rounded-lg transition-colors ${
                              userRating >= rating
                                ? 'bg-yellow-100 text-yellow-600'
                                : 'bg-gray-100 text-gray-400 hover:bg-gray-200'
                            }`}
                          >
                            <Star className={`w-6 h-6 ${userRating >= rating ? 'fill-current' : ''}`} />
                          </button>
                        ))}
                      </div>
                      <div className="text-sm text-gray-500 mt-1">
                        {userRating === 0 && 'Click to rate difficulty'}
                        {userRating === 1 && 'Very Easy'}
                        {userRating === 2 && 'Easy'}
                        {userRating === 3 && 'Moderate'}
                        {userRating === 4 && 'Challenging'}
                        {userRating === 5 && 'Very Challenging'}
                      </div>
                    </div>

                    {/* Reflection Notes */}
                    <div className="mb-6">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Reflection Notes (Optional)
                      </label>
                      <textarea
                        value={reflectionNotes}
                        onChange={(e) => setReflectionNotes(e.target.value)}
                        placeholder="How did this activity go? Any insights or observations?"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                        rows={4}
                      />
                    </div>

                    {/* Session Summary */}
                    {sessionTimer > 0 && (
                      <div className="mb-6 p-4 bg-blue-50 rounded-lg">
                        <h4 className="font-semibold text-blue-900 mb-2">Session Summary</h4>
                        <p className="text-blue-800">Time spent: {formatTimer(sessionTimer)}</p>
                      </div>
                    )}
                  </>
                ) : (
                  <div className="text-center py-8">
                    <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <Check className="w-8 h-8 text-green-600" />
                    </div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">Activity Completed!</h3>
                    <p className="text-gray-600">
                      Completed at {activity.completedAt ? new Date(activity.completedAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : 'recently'}
                    </p>
                  </div>
                )}

              {/* Reschedule Section */}
              <div className="border-t border-gray-200 pt-6">
                <h4 className="font-semibold text-gray-900 mb-3">Reschedule Activity</h4>
                <div className="flex items-center space-x-3">
                  <input
                    type="time"
                    value={newScheduledTime}
                    onChange={(e) => setNewScheduledTime(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  />
                  <button
                    onClick={handleReschedule}
                    disabled={isRescheduling || newScheduledTime === activity.scheduledTime}
                    className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isRescheduling ? 'Updating...' : 'Reschedule'}
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Footer Actions */}
        <div className="p-6 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="flex space-x-3">
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Close
              </button>
              
              {activeTab !== 'complete' && !activity.isCompleted && (
                <button
                  onClick={() => setActiveTab('complete')}
                  className="px-4 py-2 bg-indigo-100 text-indigo-700 rounded-lg hover:bg-indigo-200 transition-colors flex items-center space-x-2"
                >
                  <span>Mark Complete</span>
                  <ChevronRight className="w-4 h-4" />
                </button>
              )}
            </div>

            {activeTab === 'complete' && !activity.isCompleted && (
              <button
                onClick={handleComplete}
                disabled={isCompleting}
                className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
              >
                <Check className="w-4 h-4" />
                <span>{isCompleting ? 'Completing...' : 'Complete Activity'}</span>
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}