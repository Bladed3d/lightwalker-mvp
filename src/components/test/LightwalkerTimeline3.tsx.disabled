import React, { useState, useEffect, useRef } from 'react';
import { Play, Pause, ChevronLeft, ChevronRight, ZoomIn, ZoomOut } from 'lucide-react';
// import { motion } from 'framer-motion';
// import Particles from 'react-tsparticles';
// import { loadFull } from 'tsparticles';

const LightwalkerTimeline = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isPaused, setIsPaused] = useState(false);
  const [selectedTime, setSelectedTime] = useState<Date | null>(null);
  const [zoomLevel, setZoomLevel] = useState(4); // Pixels per minute
  const timelineRef = useRef(null);

  // Sample activities for testing
  const activities = [
    { time: '07:00', name: 'Meditation', icon: '🧘', duration: 30 },
    { time: '07:30', name: 'Exercise', icon: '💪', duration: 45 },
    { time: '08:15', name: 'Eating', icon: '🍳', duration: 30 },
    { time: '08:45', name: 'Reading', icon: '📖', duration: 40 },
    { time: '09:25', name: 'Computer', icon: '💻', duration: 120 },
    { time: '11:25', name: 'Helping', icon: '🤝', duration: 60 },
    { time: '12:25', name: 'Eating', icon: '🥗', duration: 45 },
    { time: '13:10', name: 'Observation', icon: '👀', duration: 30 },
    { time: '13:40', name: 'Computer', icon: '💻', duration: 90 },
    { time: '15:10', name: 'Meditation', icon: '🧘', duration: 30 },
    { time: '15:40', name: 'Exercise', icon: '💪', duration: 45 },
    { time: '16:25', name: 'Eating', icon: '🍽️', duration: 45 },
    { time: '17:10', name: 'Reading', icon: '📚', duration: 60 },
    { time: '18:10', name: 'Helping', icon: '🤝', duration: 90 },
    { time: '19:40', name: 'Observation', icon: '👀', duration: 30 },
    { time: '20:10', name: 'Meditation', icon: '🧘', duration: 30 },
    { time: '20:40', name: 'Sleeping', icon: '😴', duration: 480 },
  ];

  // Particle initialization
  const particlesInit = async (main: any) => {
    // await loadFull(main);
  };

  // Update current time
  useEffect(() => {
    const timer = setInterval(() => {
      if (!isPaused) {
        setCurrentTime(new Date());
      }
    }, 60000); // Update every minute
    return () => clearInterval(timer);
  }, [isPaused]);

  // Calculate timeline position
  const getTimelinePosition = () => {
    const time = selectedTime || currentTime;
    const hours = time.getHours();
    const minutes = time.getMinutes();
    const totalMinutes = hours * 60 + minutes;
    return -(totalMinutes * zoomLevel) + 400; // Center current time
  };

  // Get current activity
  const getCurrentActivity = () => {
    const time = selectedTime || currentTime;
    const currentMinutes = time.getHours() * 60 + time.getMinutes();
    for (let i = 0; i < activities.length; i++) {
      const [hours, mins] = activities[i].time.split(':').map(Number);
      const activityStart = hours * 60 + mins;
      const activityEnd = activityStart + activities[i].duration;
      if (currentMinutes >= activityStart && currentMinutes < activityEnd) {
        return activities[i];
      }
    }
    return null;
  };

  // Time navigation
  const navigateTime = (direction: number) => {
    const newTime = new Date(selectedTime || currentTime);
    newTime.setMinutes(newTime.getMinutes() + (direction * 30));
    setSelectedTime(newTime);
    setIsPaused(true);
  };

  // Zoom controls
  const adjustZoom = (delta: number) => {
    setZoomLevel((prev) => Math.max(2, Math.min(8, prev + delta)));
  };

  const resetToNow = () => {
    setSelectedTime(null);
    setIsPaused(false);
    setZoomLevel(4);
  };

  const currentActivity = getCurrentActivity();
  const displayTime = selectedTime || currentTime;

  return (
    <div className="w-full max-w-6xl mx-auto p-6 bg-gradient-to-br from-blue-100 to-purple-100 rounded-xl shadow-lg relative overflow-hidden">
      {/* Particle Background */}
      {/* <Particles
        id="tsparticles"
        init={particlesInit}
        options={{
          particles: {
            number: { value: 20, density: { enable: true, value_area: 800 } },
            color: { value: '#ffffff' },
            opacity: { value: 0.3, random: true },
            size: { value: 2, random: true },
            move: { enable: true, speed: 0.5, direction: 'none', random: true },
          },
          interactivity: { events: { onhover: { enable: false }, onclick: { enable: false } } },
        }}
        className="absolute inset-0"
      /> */}

      {/* Header */}
      <div className="text-center mb-6">
        <h2 className="text-3xl font-bold text-gray-800 border-b-2 border-blue-400/50 pb-2">
          Your Lightwalker’s Day
        </h2>
        <p className="text-gray-400 text-sm font-mono mt-2">
          Observe your ideal self’s flow through time
        </p>
      </div>

      {/* Current Activity Display */}
      <div
        className="bg-white/10 backdrop-blur-md border border-blue-200/30 rounded-lg p-6 mb-6 shadow-[0_0_12px_rgba(59,130,246,0.2)]"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="text-center">
          <div
            className="text-7xl mb-2"
            key={currentActivity?.name}
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            {currentActivity?.icon || '🌟'}
          </div>
          <h3 className="text-3xl font-bold text-gray-800">
            {currentActivity?.name || 'Free Time'}
          </h3>
          <p className="text-sm italic text-blue-300 mt-1">
            I am the type of person who {currentActivity?.name.toLowerCase() || 'embraces calm'}...
          </p>
          <p className="text-lg font-mono text-purple-300 mt-2">
            {displayTime.toLocaleTimeString('en-US', {
              hour: '2-digit',
              minute: '2-digit',
              hour12: true,
            })}
          </p>
        </div>
      </div>

      {/* Timeline Container */}
      <div className="relative bg-white/10 backdrop-blur-lg rounded-lg p-8 shadow-md overflow-hidden">
        {/* Holographic Lens */}
        <div className="absolute inset-0 pointer-events-none">
          <div className="absolute left-1/2 top-0 bottom-0 w-48 -ml-24 bg-blue-200/10 border border-blue-400/50 rounded-full shadow-[0_0_16px_rgba(59,130,246,0.4)]"></div>
          <div className="absolute left-1/2 top-0 bottom-0 w-px bg-blue-400 shadow-[0_0_8px_rgba(59,130,246,0.6)] animate-pulse"></div>
        </div>

        {/* Timeline */}
        <div ref={timelineRef} className="relative h-40 overflow-hidden">
          <div
            className="absolute top-1/2 h-0.5 bg-blue-400 shadow-[0_0_8px_rgba(59,130,246,0.5)]"
            style={{ width: `${24 * 60 * zoomLevel}px` }}
            animate={{ x: getTimelinePosition() }}
            transition={{ type: 'spring', stiffness: 100, damping: 20 }}
          >
            {/* Hour Markers */}
            {Array.from({ length: 24 }, (_, i) => (
              <div key={i}>
                <div
                  className="absolute top-0 w-px h-6 bg-blue-400/50 opacity-50 hover:opacity-100 transition-opacity"
                  style={{ left: `${i * 60 * zoomLevel}px` }}
                />
                <div
                  className="absolute text-xs font-mono text-blue-300 opacity-80"
                  style={{ left: `${i * 60 * zoomLevel - 10}px`, top: '10px' }}
                >
                  {i.toString().padStart(2, '0')}:00
                </div>
              </div>
            ))}

            {/* Activities */}
            {activities.map((activity, index) => {
              const [hours, mins] = activity.time.split(':').map(Number);
              const position = (hours * 60 + mins) * zoomLevel;
              const width = activity.duration * zoomLevel;
              return (
                <div
                  key={index}
                  className="absolute -top-12 flex flex-col items-center group"
                  style={{ left: `${position}px`, width: `${width}px` }}
                  whileHover={{ scale: 1.1 }}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <div className="text-4xl mb-1 bg-white/80 backdrop-blur-sm rounded-full p-2 shadow-[0_0_8px_rgba(59,130,246,0.3)] group-hover:animate-pulse">
                    {activity.icon}
                  </div>
                  <div className="text-xs font-mono text-gray-200 font-medium whitespace-nowrap">
                    {activity.name}
                  </div>
                  <div className="text-xs font-mono text-gray-400">{activity.time}</div>
                  <div className="absolute -top-20 hidden group-hover:block bg-white/90 backdrop-blur-sm rounded-md p-2 text-xs text-gray-700 max-w-xs">
                    I {activity.name.toLowerCase()} at {activity.time}, channeling my ideal self’s focus.
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Timeline Controls */}
        <div className="flex justify-center items-center mt-6 space-x-4 bg-white/5 backdrop-blur-md rounded-full p-2">
          <button
            onClick={() => adjustZoom(-0.5)}
            className="p-2 rounded-full bg-white/10 backdrop-blur-sm border border-blue-200/30 hover:shadow-[0_0_8px_rgba(59,130,246,0.3)]"
            title="Zoom Out"
            whileTap={{ scale: 0.95 }}
          >
            <ZoomOut className="w-5 h-5 text-blue-400" />
          </button>
          <button
            onClick={() => navigateTime(-1)}
            className="p-2 rounded-full bg-white/10 backdrop-blur-sm border border-blue-200/30 hover:shadow-[0_0_8px_rgba(59,130,246,0.3)]"
            title="30 minutes earlier"
            whileTap={{ scale: 0.95 }}
          >
            <ChevronLeft className="w-5 h-5 text-blue-400" />
          </button>
          <button
            onClick={() => setIsPaused(!isPaused)}
            className="p-3 rounded-full bg-blue-500/80 backdrop-blur-sm border border-blue-200/30 text-white hover:shadow-[0_0_8px_rgba(59,130,246,0.3)]"
            title={isPaused ? 'Resume' : 'Pause'}
            whileTap={{ scale: 0.95 }}
          >
            {isPaused ? <Play className="w-5 h-5" /> : <Pause className="w-5 h-5" />}
          </button>
          <button
            onClick={resetToNow}
            className="px-4 py-2 rounded-full bg-white/10 backdrop-blur-sm border border-blue-200/30 hover:shadow-[0_0_8px_rgba(59,130,246,0.3)] text-sm font-mono text-blue-300"
            whileTap={{ scale: 0.95 }}
          >
            Now
          </button>
          <button
            onClick={() => navigateTime(1)}
            className="p-2 rounded-full bg-white/10 backdrop-blur-sm border border-blue-200/30 hover:shadow-[0_0_8px_rgba(59,130,246,0.3)]"
            title="30 minutes later"
            whileTap={{ scale: 0.95 }}
          >
            <ChevronRight className="w-5 h-5 text-blue-400" />
          </button>
          <button
            onClick={() => adjustZoom(0.5)}
            className="p-2 rounded-full bg-white/10 backdrop-blur-sm border border-blue-200/30 hover:shadow-[0_0_8px_rgba(59,130,246,0.3)]"
            title="Zoom In"
            whileTap={{ scale: 0.95 }}
          >
            <ZoomIn className="w-5 h-5 text-blue-400" />
          </button>
        </div>
      </div>

      {/* Inspiration Message */}
      <div className="mt-6 text-center text-gray-300/80 font-mono italic text-sm">
        “Your Lightwalker flows through the day with purpose. Observe and step into their rhythm.”
      </div>
    </div>
  );
};

export default LightwalkerTimeline;