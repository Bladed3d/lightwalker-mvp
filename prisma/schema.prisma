generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Extended Sprint 1 schema with Lightwalker models
model User {
  id                String   @id @default(cuid())
  wordpressUserId   Int      @unique @map("wordpress_user_id")
  email             String   @unique
  name              String?
  preferences       String?  @default("{}")
  timezone          String   @default("UTC")
  status            String   @default("active")
  createdAt         DateTime @default(now()) @map("created_at")
  lastActive        DateTime @updatedAt @map("last_active")

  conversations     Conversation[]
  userStats         UserStats?
  costTracking      CostTracking[]
  userSessions      UserSession[]
  userLightwalkers  UserLightwalker[]
  copyingActivities CopyingActivity[]
  progressMetrics   ProgressMetric[]
  notificationSchedules NotificationSchedule[]
  userRoleModelConsultations UserRoleModelConsultation[]
  savedCharacters   SavedCharacter[]

  @@map("users")
}

// Sprint 1 models remain unchanged
model Conversation {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  title             String?
  startedAt         DateTime @default(now()) @map("started_at")
  endedAt           DateTime? @map("ended_at")
  messageCount      Int      @default(0) @map("message_count")
  totalTokensUsed   Int      @default(0) @map("total_tokens_used")
  totalCost         Float    @default(0) @map("total_cost")
  contextSummary    String?  @map("context_summary")
  lastMessageAt     DateTime @updatedAt @map("last_message_at")

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages          Message[]

  @@map("conversations")
  @@index([userId, lastMessageAt])
  @@index([userId, startedAt])
}

model Message {
  id                String   @id @default(cuid())
  conversationId    String   @map("conversation_id")
  role              String   // 'user', 'assistant', 'system'
  content           String
  modelUsed         String?  @map("model_used")
  tokensUsed        Int?     @map("tokens_used")
  cost              Float?
  complexityScore   Int?     @map("complexity_score")
  processingTime    Int?     @map("processing_time") // milliseconds
  createdAt         DateTime @default(now()) @map("created_at")

  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@index([conversationId, createdAt])
  @@index([role, createdAt])
}

model UserStats {
  userId                String   @id @map("user_id")
  totalMessages         Int      @default(0) @map("total_messages")
  totalConversations    Int      @default(0) @map("total_conversations")
  messagesThisWeek      Int      @default(0) @map("messages_this_week")
  messagesThisMonth     Int      @default(0) @map("messages_this_month")
  totalCost             Float    @default(0) @map("total_cost")
  averageComplexity     Float?   @map("average_complexity")
  favoriteTimeOfDay     String?  @map("favorite_time_of_day")
  lastMessageDate       DateTime? @map("last_message_date")
  dailyMessageCount     Int      @default(0) @map("daily_message_count")
  dailyResetDate        DateTime @default(now()) @map("daily_reset_date")
  feedbackProvided      Boolean  @default(false) @map("feedback_provided")
  
  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
  @@index([dailyResetDate])
  @@index([lastMessageDate])
}

model CostTracking {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  messageId         String?  @map("message_id")
  modelUsed         String   @map("model_used")
  tokensUsed        Int      @map("tokens_used")
  cost              Float
  requestType       String   @map("request_type") // 'chat', 'completion', 'embedding'
  processingTime    Int?     @map("processing_time") // milliseconds
  createdAt         DateTime @default(now()) @map("created_at")

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cost_tracking")
  @@index([userId, createdAt])
  @@index([modelUsed, createdAt])
  @@index([createdAt])
}

model ModelPricing {
  id                String   @id @default(cuid())
  modelName         String   @unique @map("model_name")
  provider          String
  inputPricePer1k   Float    @map("input_price_per_1k")
  outputPricePer1k  Float    @map("output_price_per_1k")
  tier              String   // 'fast', 'complex', 'cheap'
  contextWindow     Int      @map("context_window")
  isActive          Boolean  @default(true) @map("is_active")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("model_pricing")
  @@index([tier, isActive])
  @@index([provider])
}

model BetaInvite {
  id                String   @id @default(cuid())
  code              String   @unique
  email             String?
  usedBy            String?  @map("used_by")
  usedAt            DateTime? @map("used_at")
  expiresAt         DateTime @map("expires_at")
  maxUses           Int      @default(1) @map("max_uses")
  currentUses       Int      @default(0) @map("current_uses")
  createdBy         String   @map("created_by")
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("beta_invites")
  @@index([code])
  @@index([expiresAt])
}

model UserSession {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  sessionToken      String   @unique @map("session_token")
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")
  deviceFingerprint String?  @map("device_fingerprint")
  isActive          Boolean  @default(true) @map("is_active")
  lastActivity      DateTime @updatedAt @map("last_activity")
  expiresAt         DateTime @map("expires_at")
  createdAt         DateTime @default(now()) @map("created_at")

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([userId, isActive])
  @@index([sessionToken])
  @@index([expiresAt])
}

// NEW LIGHTWALKER MODELS

model LightwalkerTemplate {
  id                String   @id @default(cuid())
  name              String   @unique
  displayName       String   @map("display_name")
  tagline           String?
  description       String
  category          String   @default("general") // "general" or "situational"
  monthlyPrice      Float    @default(29.00) @map("monthly_price")
  personalityPrompt String   @map("personality_prompt")
  communicationStyle String  @map("communication_style") // JSON string
  coreTraits        String   @map("core_traits") // JSON array string
  dailyRoutines     String   @map("daily_routines") // JSON string
  challengeResponses String  @map("challenge_responses") // JSON string
  sampleActivities  String   @map("sample_activities") // JSON array string
  icon              String   @default("âœ¨")
  colorScheme       String   @map("color_scheme") // JSON string
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  userLightwalkers  UserLightwalker[]

  @@map("lightwalker_templates")
  @@index([category, isActive])
}

model UserLightwalker {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  templateId            String   @map("template_id")
  customName            String?  @map("custom_name")
  customizations        String?  // JSON string
  problemFocus          String?  @map("problem_focus")
  creationCompletedAt   DateTime? @map("creation_completed_at")
  lastInteractionAt     DateTime? @map("last_interaction_at")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  template              LightwalkerTemplate @relation(fields: [templateId], references: [id])
  copyingActivities     CopyingActivity[]
  notificationSchedules NotificationSchedule[]
  lightwalkerRoleModels LightwalkerRoleModel[]

  @@map("user_lightwalkers")
  @@index([userId, isActive])
  @@unique([userId, isActive], name: "unique_active_lightwalker")
}

model CopyingActivity {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  userLightwalkerId   String   @map("user_lightwalker_id")
  activityDescription String   @map("activity_description")
  activityType        String?  @map("activity_type")
  templateSource      String?  @map("template_source")
  difficultyRating    Int?     @map("difficulty_rating")
  satisfactionRating  Int?     @map("satisfaction_rating")
  dateCopied          DateTime @default(now()) @map("date_copied")
  timeLogged          DateTime @default(now()) @map("time_logged")
  notes               String?
  createdAt           DateTime @default(now()) @map("created_at")

  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userLightwalker     UserLightwalker @relation(fields: [userLightwalkerId], references: [id])

  @@map("copying_activities")
  @@index([userId, dateCopied])
  @@index([userLightwalkerId, dateCopied])
}

model ProgressMetric {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  date                DateTime @unique
  dailyActivityCount  Int      @default(0) @map("daily_activity_count")
  consistencyScore    Float    @default(0) @map("consistency_score")
  weeklyAverage       Float    @default(0) @map("weekly_average")
  streakDays          Int      @default(0) @map("streak_days")
  activityDiversity   Int      @default(0) @map("activity_diversity")
  calculatedAt        DateTime @default(now()) @map("calculated_at")

  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("progress_metrics")
  @@index([userId, date])
  @@unique([userId, date])
}

model NotificationSchedule {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  userLightwalkerId   String   @map("user_lightwalker_id")
  notificationType    String   @map("notification_type")
  scheduledTime       String   @map("scheduled_time") // TIME as string "HH:MM"
  timezone            String   @default("UTC")
  messageTemplate     String?  @map("message_template")
  isActive            Boolean  @default(true) @map("is_active")
  lastSentAt          DateTime? @map("last_sent_at")
  createdAt           DateTime @default(now()) @map("created_at")

  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userLightwalker     UserLightwalker @relation(fields: [userLightwalkerId], references: [id])

  @@map("notification_schedules")
  @@index([scheduledTime, isActive])
  @@index([userId, isActive])
}

model WaitlistEntry {
  id           String   @id @default(cuid())
  email        String   @map("email")
  firstName    String   @map("first_name")
  templateName String   @map("template_name")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("waitlist_entries")
  @@index([email, templateName])
  @@index([templateName])
}

// ROLE MODEL SYSTEM

model RoleModel {
  id                    String   @id @default(cuid())
  code                  String?  @unique // "BD", "SJ", "EI" - 2-3 char codes
  fullName              String   @map("full_name")
  commonName            String   @map("common_name")
  lifeSpan              String   @map("life_span")
  culturalContext       String   @map("cultural_context")
  historicalPeriod      String   @map("historical_period")
  primaryDomain         String   @map("primary_domain")
  
  // Core Identity
  lifeMission           String   @map("life_mission")
  coreValues            String   @map("core_values") // JSON array
  valueHierarchy        String   @map("value_hierarchy") // JSON array
  worldview             String
  personalPhilosophy    String   @map("personal_philosophy")
  
  // Personality & Traits
  dominantTraits        String   @map("dominant_traits") // JSON array
  communicationStyle    String   @map("communication_style")
  emotionalPatterns     String   @map("emotional_patterns")
  socialInteractionStyle String @map("social_interaction_style")
  learningApproach      String   @map("learning_approach")
  
  // Decision Making
  decisionProcess       String   @map("decision_process") // JSON object
  informationGathering  String   @map("information_gathering")
  evaluationCriteria    String   @map("evaluation_criteria")
  riskAssessment        String   @map("risk_assessment")
  implementationStyle   String   @map("implementation_style")
  
  // Daily Habits & Routines
  morningPractices      String   @map("morning_practices")
  workPatterns          String   @map("work_patterns")
  physicalPractices     String   @map("physical_practices")
  mentalSpiritualPractices String @map("mental_spiritual_practices")
  eveningRoutines       String   @map("evening_routines")
  weeklyMonthlyRhythms  String   @map("weekly_monthly_rhythms")
  
  // Challenge Response
  stressManagement      String   @map("stress_management")
  conflictResolution    String   @map("conflict_resolution")
  failureResponse       String   @map("failure_response")
  crisisLeadership      String   @map("crisis_leadership")
  adaptationStrategies  String   @map("adaptation_strategies")
  
  // Wisdom & Teachings
  coreTeachings         String   @map("core_teachings")
  famousQuotes          String   @map("famous_quotes") // JSON array
  teachingMethods       String   @map("teaching_methods")
  keyPrinciples         String   @map("key_principles")
  practicalApplications String   @map("practical_applications")
  
  // Relationships
  familyRelationships   String   @map("family_relationships")
  friendshipPatterns    String   @map("friendship_patterns")
  mentorshipStyle       String   @map("mentorship_style")
  leadershipApproach    String   @map("leadership_approach")
  conflictHandling      String   @map("conflict_handling")
  
  // Modern Integration
  contemporaryRelevance String   @map("contemporary_relevance")
  dailyLifeApplications String   @map("daily_life_applications")
  decisionTemplates     String   @map("decision_templates") // JSON array
  characterDevelopment  String   @map("character_development")
  commonMisinterpretations String @map("common_misinterpretations")
  
  // Lightwalker Integration
  personalitySynthesis  String   @map("personality_synthesis")
  decisionConsultation  String   @map("decision_consultation")
  situationalApplications String @map("situational_applications")
  potentialConflicts    String   @map("potential_conflicts")
  userImplementation    String   @map("user_implementation")
  
  // LEGACY FIELDS - Keep during migration
  enhancedAttributes    String?  @map("enhanced_attributes") // Will be migrated to Trait table
  
  // Source & Quality
  primarySources        String   @map("primary_sources")
  historicalSources     String   @map("historical_sources")
  academicSources       String   @map("academic_sources")
  culturalSources       String   @map("cultural_sources")
  sourceQualityAssessment String @map("source_quality_assessment")
  
  // Authenticity
  historicalAccuracy    String   @map("historical_accuracy")
  quoteAuthentication   String   @map("quote_authentication")
  culturalSensitivity   String   @map("cultural_sensitivity")
  balancedPerspective   String   @map("balanced_perspective")
  scholarlyConsensus    String   @map("scholarly_consensus")
  
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  traits                        Trait[]
  userRoleModelConsultations    UserRoleModelConsultation[]
  lightwalkerRoleModels         LightwalkerRoleModel[]

  @@map("role_models")
  @@index([code])
  @@index([commonName, isActive])
  @@index([primaryDomain])
}

// User consultations with role models
model UserRoleModelConsultation {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  roleModelId     String   @map("role_model_id")
  question        String
  context         String?  // Situation context
  response        String   // Generated response from role model
  responseRating  Int?     @map("response_rating") // 1-5 rating from user
  createdAt       DateTime @default(now()) @map("created_at")

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleModel       RoleModel @relation(fields: [roleModelId], references: [id])

  @@map("user_role_model_consultations")
  @@index([userId, createdAt])
  @@index([roleModelId, createdAt])
}

// Many-to-many relation for Lightwalkers having multiple role model advisors
model LightwalkerRoleModel {
  id                    String   @id @default(cuid())
  userLightwalkerId     String   @map("user_lightwalker_id")
  roleModelId           String   @map("role_model_id")
  influenceWeight       Float    @default(1.0) @map("influence_weight") // How much this role model influences the Lightwalker
  addedAt               DateTime @default(now()) @map("added_at")

  userLightwalker       UserLightwalker @relation(fields: [userLightwalkerId], references: [id], onDelete: Cascade)
  roleModel             RoleModel @relation(fields: [roleModelId], references: [id])

  @@map("lightwalker_role_models")
  @@unique([userLightwalkerId, roleModelId])
  @@index([userLightwalkerId])
}

// NEW: Trait System for Multi-Pathway Discovery
model Trait {
  id                    String   @id @default(cuid())
  traitCode             String   @unique // "BD.01", "SJ.03"
  roleModelCode         String   @map("role_model_code") // "BD", "SJ" (foreign key to RoleModel.code)
  traitNumber           Int      @map("trait_number") // 1, 2, 3... (order within role model)
  name                  String   // "Compassionately Wise"
  slug                  String   // "compassionately-wise"
  
  // Search optimization for discovery pathways
  problemTags           String[] @map("problem_tags") // ["anger", "judgment", "conflict"]
  valueTags             String[] @map("value_tags") // ["compassion", "empathy", "understanding"]  
  actionTags            String[] @map("action_tags") // ["meditation", "pause", "breathe"]
  
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  roleModel             RoleModel @relation(fields: [roleModelCode], references: [code])
  subTraits             SubTrait[]

  @@map("traits")
  @@index([roleModelCode])
  @@index([traitCode])
  @@index([problemTags])
  @@index([valueTags])
  @@index([actionTags])
}

model SubTrait {
  id                    String   @id @default(cuid())
  subTraitCode          String   @unique // "BD.01.ATT", "BD.01.PRB", "BD.01.ACT"
  traitCode             String   @map("trait_code") // "BD.01" (foreign key to Trait.traitCode)
  type                  String   // "ATTRIBUTE", "PROBLEM", "ACTION"
  
  title                 String   // "Compassionate Wisdom", "Getting Angry", "Daily Meditation"
  description           String   // Full content for this tab
  method                String   // How the role model practices this
  benefit               String   // What user gains from this
  oppositeOf            String?  @map("opposite_of") // What this replaces
  
  // Search optimization
  searchTerms           String[] @map("search_terms") // All searchable keywords for this subtrait
  
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  trait                 Trait @relation(fields: [traitCode], references: [traitCode])
  userCharacterTraits   UserCharacterTrait[]

  @@map("sub_traits")
  @@index([traitCode])
  @@index([subTraitCode])
  @@index([type])
  @@index([searchTerms])
}

model UserCharacterTrait {
  id                    String   @id @default(cuid())
  characterId           String   @map("character_id") // Foreign key to SavedCharacter.id
  subTraitCode          String   @map("sub_trait_code") // "BD.01.ATT" (what user actually selected)
  addedAt               DateTime @default(now()) @map("added_at")
  order                 Int      // User's ordering of their selected traits

  // Relations
  character             SavedCharacter @relation(fields: [characterId], references: [id], onDelete: Cascade)
  subTrait              SubTrait @relation(fields: [subTraitCode], references: [subTraitCode])

  @@map("user_character_traits")
  @@index([characterId])
  @@index([subTraitCode])
  @@unique([characterId, subTraitCode]) // Prevent duplicate trait selections
}

// Updated Saved Character System for New Relational Structure
model SavedCharacter {
  id                    String   @id @default(cuid())
  sessionId             String?  @map("session_id") // For anonymous users
  userId                String?  @map("user_id") // For logged-in users
  characterName         String?  @map("character_name") // Optional custom name
  discoveryPoints       Int?     @default(0) @map("discovery_points")
  level                 Int?     @default(1)
  isActive              Boolean  @default(true) @map("is_active")
  lastViewedAt          DateTime @default(now()) @map("last_viewed_at")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  
  // LEGACY FIELD - Keep during migration
  selectedTraits        String?  @map("selected_traits") // Will be migrated to UserCharacterTrait

  // Relations
  user                  User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userTraits            UserCharacterTrait[]

  @@map("saved_characters")
  @@index([sessionId, isActive])
  @@index([userId, isActive])
}